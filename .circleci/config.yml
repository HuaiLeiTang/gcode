version: 2.1

orbs:
  python: circleci/python@0.2.1
  win: circleci/windows@2.2.0

jobs:
  # Linux job
  test-linux:
    parameters:
      python-version:
        type: string
    docker:
      # Image containing all the required python versions, enables tox to do matrix testing
      - image: circleci/python:<< parameters.python-version >>
    steps:
      - checkout
      - restore_cache: &restore-cache-pip-template
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - restore_cache: &restore-cache-mcr-template
          key: mcr-2020a-{{ arch }}
      - run:
          name: Install 7-Zip
          command: |
            sudo apt-get update
            sudo apt-get install p7zip-full
      - run:
          # Download the files from the official website and unzip them
          name: Download Matlab 2020a Runtime
          command: |
            DIR="mcr_extracted/"
            if [ ! -d "$DIR" ]; then
              wget -O ./mcr.zip https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/3/deployment_files/installer/complete/glnxa64/MATLAB_Runtime_R2020a_Update_3_glnxa64.zip && 7z x ./mcr.zip -o"$DIR"
            fi
      - save_cache: &save-cache-mcr-template
          key: mcr-2020a-{{ arch }}
          paths:
            - "mcr_extracted"
      - run:
          name: Install Matlab Runtime
          command: |
            sudo chmod -R 777 mcr_extracted &&
            sudo mcr_extracted/install -mode silent -agreeToLicense yes -destinationFolder /matlab_runtime/
      - run:
          # Install socat to simulate serial ports
          name: Install socat to create virtual serial ports
          command: |
            apt-get update && apt-get install socat -y
            socat -V
            socat -d -d pty,raw,nonblock,echo=0,link=ttyV0 pty,raw,nonblock,echo=0,link=ttyV1 &
      - run:
          # Create a new virtual environment and install the modules
          name: Install Python deps in a venv
          command: |
            python3 --version
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            cd src_matlab/CollisionChecking/for_redistribution_files_only/
            python3 setup.py install
            cd ./../../../
      - save_cache: &save-cache-pip-template
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - "venv"
      - run:
          # Verify that no cyclic or otherwise invalid dependencies are present
          # This is extraordinarily useful to verify automatic module update proposals
          name: Dependency check
          command: |
            . venv/bin/activate
            pipdeptree -w fail
      - run:
          # Run the tests across all python versions specified in the setup.cfg
          # Missing interpreters will be skipped
          name: Run tests with tox
          command: |
            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/matlab_runtime/v98/runtime/glnxa64:/matlab_runtime/v98/bin/glnxa64:/matlab_runtime/v98/sys/os/glnxa64:/matlab_runtime/v98/extern/bin/glnxa64
            . venv/bin/activate
            tox --skip-missing-interpreters
      - run: &codecov-template
          # Use the CLI of code coverage to upload the reports
          name: Upload coverage reports to CodeCov
          shell: bash --login -eo pipefail
          command: |
            bash <(curl -s https://codecov.io/bash)
      # Upload results for CI insights
      - store_test_results:
          path: ~/test-results/pytest/
      - store_artifacts:
          path: ~/test-results/pytest/

  # Windows job
  test-win:
    parameters:
      python-version:
        type: string
    executor:
      # Use the executor from the windows orb
      name: win/default
    steps:
      - checkout
      - restore_cache: *restore-cache-mcr-template
      - run:
          # This will skip the download if the directory is already restored from cache
          name: Download Matlab 2020a Runtime
          shell: cmd.exe
          command: |
            IF NOT exist .\mcr_extracted\ (curl.exe -o .\mcr.zip https://ssd.mathworks.com/supportfiles/downloads/R2020a/Release/3/deployment_files/installer/complete/win64/MATLAB_Runtime_R2020a_Update_3_win64.zip && 7z x .\mcr.zip -o.\mcr_extracted\ -y)
      - save_cache: *save-cache-mcr-template
      - run:
          name: Install Matlab 2020a Runtime
          shell: cmd.exe
          command: |
            .\mcr_extracted\setup.exe -mode silent -agreeToLicense yes
      - restore_cache: *restore-cache-pip-template
      - run:
          # Com0Com can be used to install virtual serial ports
          # An auxiliary repo is used to save the installation files and the certificate
          # The certificate needs to be registered
          # Before the installation an environmental variable is set to enable COM#-style serial ports
          # After the install command the script waits for a minute
          name: Install virtual serial ports
          command: |
            $certificate_url = "https://github.com/pat-bert/SupportingFiles/raw/master/appveyor/serial/com0com.cer"
            $setup_url = "https://github.com/pat-bert/SupportingFiles/raw/master/appveyor/serial/setup_com0com_W7_x64_signed.exe"

            $wc = New-Object System.Net.WebClient
            $wc.DownloadFile($certificate_url, "com0com.cer")
            echo "Downloaded com0com certificate."
            C:\"Program Files (x86)"\"Windows Kits"\10\bin\10.0.16299.0\x86\certmgr.exe /?
            C:\"Program Files (x86)"\"Windows Kits"\10\bin\10.0.16299.0\x86\certmgr.exe /add com0com.cer /s /r localMachine root
            C:\"Program Files (x86)"\"Windows Kits"\10\bin\10.0.16299.0\x86\certmgr.exe /add com0com.cer /s /r localMachine trustedpublisher
            $wc.DownloadFile($setup_url, "setup_com0com_W7_x64_signed.exe")
            echo "Downloaded com0com installation file."
            $env:CNC_INSTALL_COMX_COMX_PORTS='YES'
            .\setup_com0com_W7_x64_signed.exe /S
            echo "Done setting up com0com with COM#-ports."
            sleep 60
      - run:
          # Python needs to be installed
          # Install a virtual environment using the installed python interpreter
          # Activate it to install the requirements
          name: install python and create venv
          command: |
            nuget install python -Version << parameters.python-version >> -ExcludeVersion -OutputDirectory .
            .\python\tools\python.exe --version
            .\python\tools\python.exe -m pip install virtualenv
            .\python\tools\python.exe -m virtualenv venv
            venv\Scripts\activate.ps1
            python --version
            python -m pip install -r requirements.txt
            cd ./src_matlab/CollisionChecking/for_redistribution_files_only/
            python setup.py install
            cd ./../../../
      - save_cache: *save-cache-pip-template
      - run:
          # Verify that no cyclic or otherwise invalid dependencies are present
          # This is extraordinarily useful to verify automatic module update proposals
          name: Dependency check
          command: |
            venv\Scripts\activate.ps1
            pipdeptree -w fail
      - run:
          # Run the tests across all python versions specified in the setup.cfg
          # Missing interpreters will be skipped
          # Skip all py 3.7 tox environments if it is not set as parameter (pre-installed)
          name: Run tests with tox
          command: |
            venv\Scripts\activate.ps1
            $major, $minor, $patch = "<< parameters.python-version >>".Split(".")
            if(-Not($major.Equals("3") -And $minor.Equals("7"))){$env:TOX_SKIP_ENV = "py37.*"}
            tox --skip-missing-interpreters
      # Codecov merges all reports automatically
      - run: *codecov-template
      # Upload results for CI insights
      - store_test_results:
          path: ~/test-results/pytest/
      - store_artifacts:
          path: ~/test-results/pytest/

# Combine the jobs into a workflow
workflows:
  version: 2
  main:
    jobs:
      # Run the tests on windows (requires separate installation of python to be done)
      - test-win:
          # Run the tests as matrix for easier setup
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.6"]
      # Run the tests on linux
      - test-linux:
          matrix:
            parameters:
              python-version: ["3.6.8", "3.7.6"]